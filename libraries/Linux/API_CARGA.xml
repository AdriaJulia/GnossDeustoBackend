<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API_CARGA</name>
    </assembly>
    <members>
        <member name="T:API_CARGA.Controllers.etlController">
            <summary>
            Contiene los procesos ETL (Extract, Transform and Load) necesarios para la carga de datos.
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataPublish(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Ejecuta el último paso del proceso de carga, por el que el RDF generado se almacena en el Triple Store. Permite cargar una fuente RDF arbitraria.
            </summary>
            <param name="rdfFile">Fichero RDF</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataValidate(Microsoft.AspNetCore.Http.IFormFile,System.Guid)">
            <summary>
            Valida un RDF mediante el shape SHACL configurado
            </summary>
            <param name="rdfFile">Fichero RDF</param>
            <param name="repositoryIdentifier">Identificador del repositorio para seleccionar los Shapes (los repositorios disponibles están en /etl-config/repository)</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataDiscover(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            **(Pendiente de implementar)Reconcilia entidades y descubre enlaces o equivalencias. Permite efectuar el descubrimiento en fuentes RDF arbitrarias.
            </summary>
            <param name="rdfFile">Fichero RDF</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.GetRecord(System.Guid,System.String,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recupera un registro de metadatos individual del repositorio en formato XML OAI-PMH.        
            </summary>
            <param name="identifier">Identificador de la entidad a recolectar (Los identificadores se obtienen con el metodo /etl/ListIdentifiers/{repositoryIdentifier}).</param>
            <param name="metadataPrefix">Prefijo del metadata que se desea recuperar (rdf). Los formatos de metadatos admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud /etl/ListMetadataFormats/{repositoryIdentifier}.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.Identify(System.Guid)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Obtiene la información del repositorio OAI-PMH configurado en formato XML OAI-PMH.
            </summary>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListIdentifiers(System.Guid,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Es una forma abreviada de ListRecords, que recupera solo encabezados en formato XML OAI-PMH en lugar de registros.        
            </summary>
            <param name="metadataPrefix">Especifica que los encabezados deben devolverse solo si el formato de metadatos que coincide con el metadataPrefix proporcionado está disponible o, según el soporte del repositorio para las eliminaciones, se ha eliminado. Los formatos de metadatos admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListMetadataFormats.</param>
            <param name="from">Fecha de inicio desde la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="until">Fecha de fin hasta la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="set">Argumento con un valor setSpec, que especifica los criterios establecidos para la recolección selectiva. Los formatos de sets admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListSets.</param>
            <param name="resumptionToken">Argumento exclusivo con un valor que es el token de control de flujo devuelto por una solicitud ListIdentifiers anterior que emitió una lista incompleta.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListMetadataFormats(System.Guid,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recupera los formatos de metadatos disponibles del repositorio en formato XML OAI-PMH.        
            </summary>
            <param name="identifier">Argumento opcional que especifica el identificador único del elemento para el que se solicitan los formatos de metadatos disponibles. Si se omite este argumento, la respuesta incluye todos los formatos de metadatos admitidos por este repositorio. </param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListRecords(System.Guid,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recupera registros del repositorio en formato XML OAI-PMH.        
            </summary>
            <param name="metadataPrefix">Especifica que los encabezados deben devolverse solo si el formato de metadatos que coincide con el metadataPrefix proporcionado está disponible o, según el soporte del repositorio para las eliminaciones, se ha eliminado. Los formatos de metadatos admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListMetadataFormats.</param>
            <param name="from">Fecha de inicio desde la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="until">Fecha de fin hasta la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="set">Argumento con un valor setSpec, que especifica los criterios establecidos para la recolección selectiva. Los formatos de sets admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListSets.</param>
            <param name="resumptionToken">Argumento exclusivo con un valor que es el token de control de flujo devuelto por una solicitud ListRecords anterior que emitió una lista incompleta.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListSets(System.Guid,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recuperar la estructura establecida de un repositorio en formato XML OAI-PMH, útil para la recolección selectiva.        
            </summary>
            <param name="resumptionToken">Argumento exclusivo con un valor que es el token de control de flujo devuelto por una solicitud ListSets anterior que emitió una lista incompleta.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="T:API_CARGA.Controllers.repositoryController">
            <summary>
            Contiene los procesos necesarios para la gestión de los repositorios OAI-PMH (creación, modificación, eliminación...).
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.GetRepository">
            <summary>
            Obtiene un listado con todas las configuraciones de los repositorios OAI-PMH
            </summary>
            <returns>Listado con todas las configuraciones de los repositorios OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.GetRepository(System.Guid)">
            <summary>
            Obtiene la configuración de un repositorio OAI-PMH
            </summary>
            <param name="identifier">Identificador del repositorio, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository</param>
            <returns>Configuración del repositorio</returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.AddConfigRepository(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Añade una nueva configuración de un repositorio OAI-PMH
            </summary>
            <param name="repositoryConfig">Datos de configuración del repositorio</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.DeleteRepository(System.Guid)">
            <summary>
            Elimina la configuración de un repositorio OAI-PMH.
            </summary>
            <param name="identifier">Identificador del repositorio, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.ModifyRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Modifica la configuración de un repositorio OAI-PMH.
            </summary>
            <param name="repositoryConfig">Datos de configuración del repositorio</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Controllers.syncController">
            <summary>
            Contiene los procesos necesarios para la ejecución de las sincronizaciones.
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.syncController.PostSyncro(API_CARGA.ViewModel.PublishRepositoryModel)">
            <summary>
            Ejecuta una sincronización
            </summary>
            <param name="publishModel">Modelo para la ejecución de una sincronización</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Controllers.ValidationController">
            <summary>
            Contiene los procesos necesarios para la gestión de las validaciones (creación, modificación, eliminación...).
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.GetShape">
            <summary>
            Obtiene la configuración de los shape SHACL de validación
            </summary>
            <returns>Listado con las definiciones de las validaciones</returns>       
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.GetShape(System.Guid)">
            <summary>
            Obtiene la configuración del shape SHACL pasado por parámetro
            </summary>
            <param name="identifier">Identificador de la validación a obtener, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <returns>Definición de la validación</returns>       
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.AddShape(System.String,System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Añade una configuración de validación mediante un shape SHACL
            </summary>
            <param name="name">Nombre del Shape, elegido por el usuario que lo crea, ejemplo: bibo_Article</param>
            <param name="repositoryID">ID del repositorio de la validación, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <param name="rdfFile">Fichero con el Shape</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.DeleteShape(System.Guid)">
            <summary>
            Elimina la configuración una configuración de validación 
            </summary>
            <param name="identifier">Identificador de la validación a eliminar, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.ModifyShape(System.Guid,System.String,System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Modifica la configuración de validación mediante un shape SHACL
            </summary>
            <param name="shapeConfigID">Identificador del Shape a modificar, este párametro se puede obtener de: http://herc-as-front-desa.atica.um.es/carga/etl-config/Validation, ejemplo: bb1c3916-63a3-4b8d-89cf-3a51341482da</param>
            <param name="name">Nombre a modificar para el shape, puede ser el mismo que tenía anteriormente, ejemplo: bibo_Article</param>
            <param name="repositoryID">ID del repositorio de la validacióna modificar, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <param name="rdfFile">Fichero con el Shape</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Models.Entities.RepositoryConfig">
            <summary>
            Datos de configuración de un repositorio OAI-PMH
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.RepositoryConfigID">
            <summary>
            Identificador del repositorio
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.Name">
            <summary>
            Nombre del repositorio
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.OauthToken">
            <summary>
            Token OAUTH
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.Url">
            <summary>
            url del repositorio
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.ShapeConfig">
            <summary>
            Datos de configuración de una validación SHACL
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.ShapeConfigID">
            <summary>
            Identificador de la validación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.Name">
            <summary>
            Nombre de la validación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.RepositoryID">
            <summary>
            Identificador de la validación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.Shape">
            <summary>
            Definición del shape SHACL
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.ShapeReport">
            <summary>
            Datos de reporte de un Shape
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.severity">
            <summary>
            Severidad
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.focusNode">
            <summary>
            Nodo 
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.resultValue">
            <summary>
            Resultado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.message">
            <summary>
            Mensaje de error
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.resultPath">
            <summary>
            Path del resultado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.shapeName">
            <summary>
            Nombre del Shape
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.sourceShape">
            <summary>
            Identificador del shape SHACL
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.shapeID">
            <summary>
            Identificador de la configuración del Shape configurado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.severity">
            <summary>
            Severidad
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.conforms">
            <summary>
            Indica si no se incumple ninguna restricción
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.results">
            <summary>
            Lista con las validaciones que no han pasado
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.OaiPublishRDFService.CallGetRecord(System.Guid,System.String)">
            <summary>
            Obtiene el rdf del identificador en el repositorio
            </summary>
            <param name="repoIdentifier">Identificador del repositorio</param>
            <param name="identifier">Identificador del elemento</param>
            <returns>RDF</returns>
        </member>
        <member name="M:API_CARGA.Models.Utility.SparqlUtility.GetTriplesFromRDF(System.Xml.XmlDocument)">
            <summary>
            Obtiene los triples de un RDF
            </summary>
            <param name="pXMLRDF">XML RDF</param>
            <returns>Lista de triples</returns>
        </member>
        <member name="M:API_CARGA.Models.Utility.SparqlUtility.ValidateRDF(System.String,System.Collections.Generic.List{API_CARGA.Models.Entities.ShapeConfig})">
            <summary>
            Valida un RDF
            </summary>
            <param name="pRdfFileContent">XML RDF</param>
            <param name="pShapesConfig">Lista de Shapes de validación</param>
            <returns>Lista de triples</returns>
        </member>
        <member name="M:API_CARGA.Models.Utility.SparqlUtility.LoadTriples(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Carga los triples en un PARQL endpoint
            </summary>
            <param name="pTriples">Triples a inertar</param>
            <param name="pSPARQLEndpoint">Endpoint SPARQL</param>
            <param name="pQueryParam">Query param</param>
            <param name="pGraph">Grafo</param>
        </member>
        <member name="M:VDS.RDF.RohGraph.GetNextBlankNodeID">
            <summary>
            Creates a new unused Blank Node ID and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Query.Inference.RohRdfsReasoner">
            <summary>
            An Inference Engine which uses RDFS reasoning.
            </summary>
            <remarks>
            <para>
            Does basic RDFS inferencing using the schema taken from the Graph(s) which are provided in calls to the reasoners <see cref="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.Initialise(VDS.RDF.IGraph)">Initialise()</see> method.
            </para>
            <para>
            Types of inference performed are as follows:.
            </para>
            <ul>
                <li>Class hierarchy reasoning - asserts additional types triples for anything that is typed as the subclass of a class.</li>
                <li>Property hierarchy reasoning - asserts additional property triples for anything where the predicate is a subproperty of a defined property</li>   
            </ul>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.#ctor">
            <summary>
            Creates a new instance of the Static RdfsReasoner.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies inference to the given Graph and outputs the inferred information to that Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.Initialise(VDS.RDF.IGraph)">
            <summary>
            Imports any Class heirarchy information from the given Graph into the Reasoners Knowledge Base in order to initialise the Reasoner.
            </summary>
            <param name="g">Graph to import from.</param>
            <remarks>
            Looks for Triples defining things to be classes and those defining that something is a subClass of something.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.InferClasses(VDS.RDF.Triple,VDS.RDF.IGraph,VDS.RDF.IGraph,System.Collections.Generic.List{VDS.RDF.Triple})">
            <summary>
            Helper method which applies Class hierarchy inferencing.
            </summary>
            <param name="t">Triple defining the type for something.</param>
            <param name="input">Input Graph.</param>
            <param name="output">Output Graph.</param>
            <param name="inferences">List of Inferences.</param>
        </member>
    </members>
</doc>
