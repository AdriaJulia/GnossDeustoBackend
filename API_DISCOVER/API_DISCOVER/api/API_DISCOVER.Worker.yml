### YamlMime:ManagedReference
items:
- uid: API_DISCOVER.Worker
  commentId: T:API_DISCOVER.Worker
  id: Worker
  parent: API_DISCOVER
  children:
  - API_DISCOVER.Worker.#ctor(Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
  - API_DISCOVER.Worker.Dispose
  - API_DISCOVER.Worker.StartAsync(System.Threading.CancellationToken)
  - API_DISCOVER.Worker.StopAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: Worker
  nameWithType: Worker
  fullName: API_DISCOVER.Worker
  type: Class
  source:
    remote:
      path: API_DISCOVER/API_DISCOVER/Worker.cs
      branch: master
      repo: https://github.com/HerculesCRUE/GnossDeustoBackend.git
    id: Worker
    path: Worker.cs
    startLine: 15
  assemblies:
  - API_DISCOVER
  namespace: API_DISCOVER
  syntax:
    content: 'public class Worker : IHostedService, IDisposable'
    content.vb: >-
      Public Class Worker
          Implements IHostedService, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Hosting.IHostedService
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: API_DISCOVER.Worker.#ctor(Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
  commentId: M:API_DISCOVER.Worker.#ctor(Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)'
  parent: API_DISCOVER.Worker
  langs:
  - csharp
  - vb
  name: Worker(ILogger<Worker>, IServiceScopeFactory)
  nameWithType: Worker.Worker(ILogger<Worker>, IServiceScopeFactory)
  fullName: API_DISCOVER.Worker.Worker(Microsoft.Extensions.Logging.ILogger<API_DISCOVER.Worker>, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
  type: Constructor
  source:
    remote:
      path: API_DISCOVER/API_DISCOVER/Worker.cs
      branch: master
      repo: https://github.com/HerculesCRUE/GnossDeustoBackend.git
    id: .ctor
    path: Worker.cs
    startLine: 23
  assemblies:
  - API_DISCOVER
  namespace: API_DISCOVER
  syntax:
    content: public Worker(ILogger<Worker> logger, IServiceScopeFactory serviceScopeFactory)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker}
    - id: serviceScopeFactory
      type: Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
    content.vb: Public Sub New(logger As ILogger(Of Worker), serviceScopeFactory As IServiceScopeFactory)
  overload: API_DISCOVER.Worker.#ctor*
  nameWithType.vb: Worker.Worker(ILogger(Of Worker), IServiceScopeFactory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: API_DISCOVER.Worker.Worker(Microsoft.Extensions.Logging.ILogger(Of API_DISCOVER.Worker), Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
  name.vb: Worker(ILogger(Of Worker), IServiceScopeFactory)
- uid: API_DISCOVER.Worker.StartAsync(System.Threading.CancellationToken)
  commentId: M:API_DISCOVER.Worker.StartAsync(System.Threading.CancellationToken)
  id: StartAsync(System.Threading.CancellationToken)
  parent: API_DISCOVER.Worker
  langs:
  - csharp
  - vb
  name: StartAsync(CancellationToken)
  nameWithType: Worker.StartAsync(CancellationToken)
  fullName: API_DISCOVER.Worker.StartAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: API_DISCOVER/API_DISCOVER/Worker.cs
      branch: master
      repo: https://github.com/HerculesCRUE/GnossDeustoBackend.git
    id: StartAsync
    path: Worker.cs
    startLine: 29
  assemblies:
  - API_DISCOVER
  namespace: API_DISCOVER
  syntax:
    content: public Task StartAsync(CancellationToken stoppingToken)
    parameters:
    - id: stoppingToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function StartAsync(stoppingToken As CancellationToken) As Task
  overload: API_DISCOVER.Worker.StartAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: API_DISCOVER.Worker.StopAsync(System.Threading.CancellationToken)
  commentId: M:API_DISCOVER.Worker.StopAsync(System.Threading.CancellationToken)
  id: StopAsync(System.Threading.CancellationToken)
  parent: API_DISCOVER.Worker
  langs:
  - csharp
  - vb
  name: StopAsync(CancellationToken)
  nameWithType: Worker.StopAsync(CancellationToken)
  fullName: API_DISCOVER.Worker.StopAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: API_DISCOVER/API_DISCOVER/Worker.cs
      branch: master
      repo: https://github.com/HerculesCRUE/GnossDeustoBackend.git
    id: StopAsync
    path: Worker.cs
    startLine: 114
  assemblies:
  - API_DISCOVER
  namespace: API_DISCOVER
  syntax:
    content: public Task StopAsync(CancellationToken stoppingToken)
    parameters:
    - id: stoppingToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function StopAsync(stoppingToken As CancellationToken) As Task
  overload: API_DISCOVER.Worker.StopAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: API_DISCOVER.Worker.Dispose
  commentId: M:API_DISCOVER.Worker.Dispose
  id: Dispose
  parent: API_DISCOVER.Worker
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Worker.Dispose()
  fullName: API_DISCOVER.Worker.Dispose()
  type: Method
  source:
    remote:
      path: API_DISCOVER/API_DISCOVER/Worker.cs
      branch: master
      repo: https://github.com/HerculesCRUE/GnossDeustoBackend.git
    id: Dispose
    path: Worker.cs
    startLine: 121
  assemblies:
  - API_DISCOVER
  namespace: API_DISCOVER
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: API_DISCOVER.Worker.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: API_DISCOVER
  commentId: N:API_DISCOVER
  name: API_DISCOVER
  nameWithType: API_DISCOVER
  fullName: API_DISCOVER
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Hosting.IHostedService
  commentId: T:Microsoft.Extensions.Hosting.IHostedService
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostedService
  nameWithType: IHostedService
  fullName: Microsoft.Extensions.Hosting.IHostedService
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  isExternal: true
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: API_DISCOVER.Worker.#ctor*
  commentId: Overload:API_DISCOVER.Worker.#ctor
  name: Worker
  nameWithType: Worker.Worker
  fullName: API_DISCOVER.Worker.Worker
- uid: Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker}
  commentId: T:Microsoft.Extensions.Logging.ILogger{API_DISCOVER.Worker}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<Worker>
  nameWithType: ILogger<Worker>
  fullName: Microsoft.Extensions.Logging.ILogger<API_DISCOVER.Worker>
  nameWithType.vb: ILogger(Of Worker)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of API_DISCOVER.Worker)
  name.vb: ILogger(Of Worker)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: API_DISCOVER.Worker
    name: Worker
    nameWithType: Worker
    fullName: API_DISCOVER.Worker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: API_DISCOVER.Worker
    name: Worker
    nameWithType: Worker
    fullName: API_DISCOVER.Worker
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceScopeFactory
  nameWithType: IServiceScopeFactory
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: API_DISCOVER.Worker.StartAsync*
  commentId: Overload:API_DISCOVER.Worker.StartAsync
  name: StartAsync
  nameWithType: Worker.StartAsync
  fullName: API_DISCOVER.Worker.StartAsync
- uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
  name: StartAsync(CancellationToken)
  nameWithType: IHostedService.StartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: IHostedService.StartAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: IHostedService.StartAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: API_DISCOVER.Worker.StopAsync*
  commentId: Overload:API_DISCOVER.Worker.StopAsync
  name: StopAsync
  nameWithType: Worker.StopAsync
  fullName: API_DISCOVER.Worker.StopAsync
- uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
  name: StopAsync(CancellationToken)
  nameWithType: IHostedService.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostedService.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostedService.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: API_DISCOVER.Worker.Dispose*
  commentId: Overload:API_DISCOVER.Worker.Dispose
  name: Dispose
  nameWithType: Worker.Dispose
  fullName: API_DISCOVER.Worker.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
