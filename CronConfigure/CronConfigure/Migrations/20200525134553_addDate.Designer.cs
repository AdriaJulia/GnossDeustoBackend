// <auto-generated />
using System;
using CronConfigure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CronConfigure.Migrations
{
    [DbContext(typeof(HangfireEntityContext))]
    [Migration("20200525134553_addDate")]
    partial class addDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CronConfigure.Models.Entitties.JobRepository", b =>
                {
                    b.Property<string>("IdJob")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaEjecucion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdRepository")
                        .HasColumnType("uuid");

                    b.HasKey("IdJob");

                    b.ToTable("JobRepository","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.AggregatedCounter", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Key");

                    b.ToTable("aggregatedcounter","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.Counter", b =>
                {
                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Value", "Key");

                    b.ToTable("counter","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.Hash", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Field")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Key", "Field");

                    b.ToTable("hash","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasColumnName("arguments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnName("expireat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvocationData")
                        .IsRequired()
                        .HasColumnName("invocationdata")
                        .HasColumnType("text");

                    b.Property<long?>("StateId")
                        .HasColumnName("stateid")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnName("statename")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("job","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.JobParameter", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnName("jobid")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("JobId", "Name");

                    b.ToTable("jobparameter","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.JobQueue", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Queue")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("FetchedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "Queue");

                    b.ToTable("jobqueue","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.List", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id", "Key");

                    b.ToTable("list","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.Schema", b =>
                {
                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.HasKey("Version");

                    b.ToTable("schema","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.Server", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("server","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.Set", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnName("expireat")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Score")
                        .HasColumnName("score")
                        .HasColumnType("double precision");

                    b.HasKey("Value", "Key");

                    b.ToTable("set","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.State", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Reason")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("state","hangfire");
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.JobParameter", b =>
                {
                    b.HasOne("CronConfigure.Models.Hangfire.Job", "Job")
                        .WithMany("JobParameter")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CronConfigure.Models.Hangfire.State", b =>
                {
                    b.HasOne("CronConfigure.Models.Hangfire.Job", "Job")
                        .WithMany("State")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
